name: Lint

on:
  push:
    branches:
      - master
  pull_request:

env:
  DOCKER_BUILDKIT: 1
  TERRAFORM_VERSION: 0.13.3

jobs:
  go-lint:
    name: Go Lint
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Lint
        id: lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          golangci_lint_flags: "-c .golangci.yml"
          reporter: github-pr-review
          filter_mode: nofilter
          fail_on_error: true

  py-lint:
    name: Python Lint
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Lint
        id: lint
        uses: ricardochaves/python-lint@v1.3.0
        with:
          python-root-list: "./example/python"
          use-flake8: true
          extra-flake8-options: "--max-line-length=150"
          use-isort: true
          use-pylint: false
          use-pycodestyle: false
          use-black: false
          use-mypy: false

  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Lint
        id: lint
        uses: reviewdog/action-hadolint@v1
        with:
          reporter: github-pr-review
          filter_mode: nofilter
          fail_on_error: true

  dockerfile-scan:
    name: Scan Image
    needs: [dockerfile-lint]
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        service: [python, go]

    steps:
      - name: Setup Go
        id: setup
        uses: actions/setup-go@v2.1.2
        with:
          go-version: 1.14

      - name: Checkout code
        id: checkout
        uses: actions/checkout@v2

      - name: Build image from Dockerfile
        id: build
        run: |
          TAG="${{ matrix.service }}:ci"
          docker build -f deployment/dockerfile/${{ matrix.service }}/Dockerfile -t ${TAG} .
          echo "::set-output name=tag::${TAG}"

      - name: Run Beta Container Scanner
        id: beta-scanner
        uses: Azure/container-scan@v0
        with:
          image-name: ${{ steps.build.outputs.tag }}
          run-quality-checks: true
          severity-threshold: HIGH

  terraform-ci:
    name: Terraform Plan
    strategy:
      matrix:
        env: [cloudrun]
    runs-on: ubuntu-18.04
    defaults:
      run:
        working-directory: ./terraform/${{ matrix.env }}
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_GCP_CREDENTIALS }}

    steps:
      - name: Checkout Code
        id: checkout
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: TFLint
        id: lint
        uses: reviewdog/action-tflint@master
        with:
          github_token: ${{ secrets.github_token }}
          working_directory: ./
          reporter: github-pr-review
          filter_mode: nofilter
          fail_on_error: true

      - name: TF Security
        id: sec
        uses: reviewdog/action-tfsec@v1
        with:
          github_token: ${{ secrets.github_token }}
          working_directory: ./
          reporter: github-pr-review
          filter_mode: nofilter
          fail_on_error: false

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## \`Plan Result Of ${{ matrix.env }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n${{ steps.plan.outputs.stdout }}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
